{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.27.1.19265",
      "templateHash": "9163460879774214300"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "vnet1Name": {
      "type": "string",
      "defaultValue": "vnet-1"
    },
    "vnet1AddressPrefix": {
      "type": "string",
      "defaultValue": "10.5.0.0/16"
    },
    "vnet1subnets": {
      "type": "array",
      "defaultValue": [
        {
          "name": "VM-subnet",
          "addressPrefix": "10.5.1.0/24"
        }
      ]
    },
    "remotevnet1Name": {
      "type": "string",
      "defaultValue": "remote-vnet-2"
    },
    "remotevnet1AddressPrefix": {
      "type": "string",
      "defaultValue": "10.99.0.0/16"
    },
    "remotevnet1subnets": {
      "type": "array",
      "defaultValue": [
        {
          "name": "VM-subnet",
          "addressPrefix": "10.99.1.0/24"
        }
      ]
    },
    "nsg1Name": {
      "type": "string",
      "defaultValue": "nsg1"
    },
    "homeIP": {
      "type": "string"
    },
    "username": {
      "type": "string"
    },
    "adminPassword": {
      "type": "securestring"
    },
    "sshpubkeydata": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "add a public key here or with param file if desired."
      }
    },
    "vm1NICname": {
      "type": "string",
      "defaultValue": "vm1NIC"
    },
    "vm1Name": {
      "type": "string",
      "defaultValue": "vm1"
    },
    "remotevm1PubIPname": {
      "type": "string",
      "defaultValue": "remote-vm1PubIP"
    },
    "RemoteVM1NICname": {
      "type": "string",
      "defaultValue": "remote-vm2NIC"
    },
    "RemoteVM1Name": {
      "type": "string",
      "defaultValue": "remote-vm1"
    },
    "SLB1pubIPname": {
      "type": "string",
      "defaultValue": "SLB1pubIP"
    },
    "pubSLB1name": {
      "type": "string",
      "defaultValue": "pubSLB1"
    }
  },
  "variables": {
    "copy": [
      {
        "name": "vnet1subnetproperties",
        "count": "[length(parameters('vnet1subnets'))]",
        "input": {
          "name": "[parameters('vnet1subnets')[copyIndex('vnet1subnetproperties')].name]",
          "properties": {
            "addressPrefix": "[parameters('vnet1subnets')[copyIndex('vnet1subnetproperties')].addressPrefix]",
            "networkSecurityGroup": {
              "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsg1Name'))]"
            },
            "serviceEndpoints": [],
            "privateEndpointNetworkPolicies": "Disabled",
            "privateLinkServiceNetworkPolicies": "Enabled"
          }
        }
      },
      {
        "name": "remotevnet1subnetproperties",
        "count": "[length(parameters('remotevnet1subnets'))]",
        "input": {
          "name": "[parameters('remotevnet1subnets')[copyIndex('remotevnet1subnetproperties')].name]",
          "properties": {
            "addressPrefix": "[parameters('remotevnet1subnets')[copyIndex('remotevnet1subnetproperties')].addressPrefix]",
            "networkSecurityGroup": {
              "id": "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsg1Name'))]"
            },
            "serviceEndpoints": [],
            "privateEndpointNetworkPolicies": "Disabled",
            "privateLinkServiceNetworkPolicies": "Enabled"
          }
        }
      }
    ],
    "$fxv#0": "#cloud-config\r\npackage_upgrade: true\r\npackages:\r\n  - apache2\r\n  - openssl\r\nwrite_files:\r\n  # Write the tcp_connect.sh script to the /home/ubuntu directory\r\n  - owner: root:root\r\n    path: /usr/bin/tcp_connect.sh\r\n    permissions: '0755'\r\n    content: |\r\n      #!/bin/bash\r\n      # This script will open x number of TCP connections to an endpoint and specific port\r\n      # and maintain the specified number of connections as long as the script runs. \r\n      # Each connection is set to a 30 second timeout (this is to avoid some undesired behavior with longer running connections in some scenarios),\r\n      # and a new connection will be created after that timeout, but the overall number of connections will be maintained.\r\n\r\n      # Usage: bash tcp_connect.sh <number of connections> <endpoint> <port>\r\n      # Example: bash tcp_connect.sh 10 www.example.com 80\r\n\r\n      # Check the number of arguments\r\n      if [ $# -ne 3 ]; then\r\n        echo \"Invalid number of arguments. Please provide x, endpoint, and port.\"\r\n        exit 1\r\n      fi\r\n\r\n      # Assign the arguments to variables\r\n      x=$1\r\n      endpoint=$2\r\n      port=$3\r\n\r\n      # Create a temporary file to store the process IDs of the background jobs\r\n      tmpfile=$(mktemp /tmp/tcp_connect.XXXXXX)\r\n\r\n      # Define the cleanup function to kill the background processes\r\n      cleanup() {\r\n      echo \"Cleaning up...\"\r\n        while read pid; do\r\n          echo \"Killing process $pid...\"\r\n          kill $pid\r\n          echo \"Process $pid killed.\"\r\n        done < $tmpfile\r\n        rm $tmpfile\r\n        pkill nc\r\n        echo \"Cleanup complete.\"\r\n        exit 0\r\n      }\r\n\r\n      # Catch the SIGINT signal and execute the cleanup function\r\n      trap cleanup SIGINT\r\n\r\n      # Loop x times and create a TCP connection using netcat in the background\r\n      for i in $(seq 1 $x); do\r\n        # Use -w option to specify a timeout in seconds\r\n        # Use -v option to have netcat give more verbose output\r\n        # Use & to run the command in the background and echo the process ID to the tmpfile\r\n        while true; do\r\n          nc -vw 30 $endpoint $port\r\n        done &\r\n        echo $! >> $tmpfile\r\n      done\r\n\r\n      # Wait for any key press to terminate the script and the background jobs\r\n      echo \"Press Ctrl+C to stop the TCP connections...\"\r\n\r\n      # Wait indefinitely\r\n      while true; do\r\n        sleep 1\r\n      done\r\n      \r\n\r\n  # Create a simple HTML file to serve from Apache\r\n  - owner: www-data:www-data\r\n    path: /var/www/html/index.html\r\n    content: |\r\n      <html>\r\n      <head>\r\n        <title>VM1 Test Page</title>\r\n      </head>\r\n      <body>\r\n        <h1>Hello from VM1</h1>\r\n      </body>\r\n      </html>\r\nruncmd:\r\n  # Copy the tcp_connect.sh script to all home directories\r\n  - [ sudo, -u, root, bash, -c, \"cp /usr/bin/tcp_connect.sh /home/*/\" ]\r\n  # Generate a self-signed certificate and key\r\n  - openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt -subj \"/CN=contoso.com\"\r\n  # Create an Apache config file for HTTPS\r\n  - echo \"<IfModule mod_ssl.c>\" > /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"<VirtualHost *:443>\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"ServerAdmin webmaster@localhost\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"ServerName contoso.com\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"DocumentRoot /var/www/html\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"ErrorLog ${APACHE_LOG_DIR}/error.log\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"CustomLog ${APACHE_LOG_DIR}/access.log combined\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"SSLEngine on\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"</VirtualHost>\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"</IfModule>\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  # Enable HTTPS site and reload Apache\r\n  - a2enmod ssl\r\n  - a2ensite default-ssl.conf\r\n  - systemctl reload apache2.service",
    "$fxv#1": "#cloud-config\r\npackage_upgrade: true\r\npackages:\r\n  - apache2\r\n  - openssl\r\nwrite_files:\r\n  - owner: www-data:www-data\r\n    path: /var/www/html/index.html\r\n    content: |\r\n      <html>\r\n      <head>\r\n        <title>Remote VM1 Test Page</title>\r\n      </head>\r\n      <body>\r\n        <h1>Hello from Remote VM 1</h1>\r\n      </body>\r\n      </html>\r\nruncmd:\r\n  # Generate a self-signed certificate and key\r\n  - openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/apache-selfsigned.key -out /etc/ssl/certs/apache-selfsigned.crt -subj \"/CN=contoso.com\"\r\n  # Create an Apache config file for HTTPS\r\n  - echo \"<IfModule mod_ssl.c>\" > /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"<VirtualHost *:443>\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"ServerAdmin webmaster@localhost\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"ServerName contoso.com\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"DocumentRoot /var/www/html\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"ErrorLog ${APACHE_LOG_DIR}/error.log\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"CustomLog ${APACHE_LOG_DIR}/access.log combined\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"SSLEngine on\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"SSLCertificateFile /etc/ssl/certs/apache-selfsigned.crt\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"SSLCertificateKeyFile /etc/ssl/private/apache-selfsigned.key\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"</VirtualHost>\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  - echo \"</IfModule>\" >> /etc/apache2/sites-available/default-ssl.conf\r\n  # Enable HTTPS site and reload Apache\r\n  - a2enmod ssl\r\n  - a2ensite default-ssl.conf\r\n  - systemctl reload apache2.service",
    "linuxVMsize": "Standard_B1s",
    "sshkeyconfig": {
      "publicKeys": [
        {
          "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('username'))]",
          "keyData": "[parameters('sshpubkeydata')]"
        }
      ]
    },
    "vm1cloudInit": "[base64(variables('$fxv#0'))]",
    "vm2cloudInit": "[base64(variables('$fxv#1'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2022-11-01",
      "name": "[parameters('vnet1Name')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnet1AddressPrefix')]"
          ]
        },
        "subnets": "[variables('vnet1subnetproperties')]",
        "virtualNetworkPeerings": [],
        "enableDdosProtection": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsg1Name'))]"
      ]
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "apiVersion": "2022-11-01",
      "name": "[parameters('remotevnet1Name')]",
      "location": "[parameters('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('remotevnet1AddressPrefix')]"
          ]
        },
        "subnets": "[variables('remotevnet1subnetproperties')]",
        "virtualNetworkPeerings": [],
        "enableDdosProtection": false
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkSecurityGroups', parameters('nsg1Name'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkSecurityGroups",
      "apiVersion": "2022-11-01",
      "name": "[parameters('nsg1Name')]",
      "location": "[parameters('location')]",
      "properties": {
        "securityRules": [
          {
            "name": "AllowCorpnet",
            "type": "Microsoft.Network/networkSecurityGroups/securityRules@2022-11-01",
            "properties": {
              "description": "CSS Governance Security Rule.  Allow Corpnet inbound.  https://aka.ms/casg",
              "priority": 2700,
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "CorpNetPublic",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowSAW",
            "type": "Microsoft.Network/networkSecurityGroups/securityRules",
            "properties": {
              "description": "CSS Governance Security Rule.  Allow SAW inbound.  https://aka.ms/casg",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "CorpNetSaw",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 2701,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "Any_home",
            "properties": {
              "description": "Allow home IP",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "[parameters('homeIP')]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 150,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          },
          {
            "name": "AllowSLB1IP",
            "properties": {
              "description": "Allow inbound from SLB1pubIP",
              "protocol": "*",
              "sourcePortRange": "*",
              "destinationPortRange": "*",
              "sourceAddressPrefix": "[reference(parameters('SLB1pubIPname')).ipAddress]",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound",
              "sourcePortRanges": [],
              "destinationPortRanges": [],
              "sourceAddressPrefixes": [],
              "destinationAddressPrefixes": []
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('SLB1pubIPname'))]"
      ]
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2022-11-01",
      "name": "[parameters('SLB1pubIPname')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "publicIPAddressVersion": "IPv4",
        "idleTimeoutInMinutes": 4
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "apiVersion": "2022-11-01",
      "name": "[parameters('pubSLB1name')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('SLB1pubIPname'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "backendpool1"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "httprule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('pubSLB1name'), 'ipconfig1')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('pubSLB1name'), 'backendpool1')]"
              },
              "protocol": "Tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "idleTimeoutInMinutes": 4,
              "enableFloatingIP": false,
              "enableTcpReset": false,
              "loadDistribution": "Default",
              "disableOutboundSnat": true,
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('pubSLB1name'), 'HTTPProbe')]"
              }
            }
          },
          {
            "name": "HTTPSRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('pubSLB1name'), 'ipconfig1')]"
              },
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('pubSLB1name'), 'backendpool1')]"
              },
              "protocol": "Tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "idleTimeoutInMinutes": 4,
              "enableFloatingIP": false,
              "enableTcpReset": false,
              "loadDistribution": "Default",
              "disableOutboundSnat": true,
              "probe": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', parameters('pubSLB1name'), 'HTTPSProbe')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "HTTPProbe",
            "properties": {
              "protocol": "Http",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "requestPath": "/"
            }
          },
          {
            "name": "HTTPSProbe",
            "properties": {
              "protocol": "Https",
              "port": 443,
              "intervalInSeconds": 5,
              "numberOfProbes": 2,
              "requestPath": "/"
            }
          }
        ],
        "inboundNatRules": [
          {
            "name": "natrule1",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('pubSLB1name'), 'ipconfig1')]"
              },
              "protocol": "Tcp",
              "backendPort": 22,
              "frontendPortRangeStart": 2222,
              "frontendPortRangeEnd": 2222,
              "idleTimeoutInMinutes": 4,
              "enableFloatingIP": false,
              "enableTcpReset": false,
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('pubSLB1name'), 'backendpool1')]"
              }
            }
          }
        ],
        "outboundRules": [
          {
            "name": "outboundrule1",
            "properties": {
              "backendAddressPool": {
                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('pubSLB1name'), 'backendpool1')]"
              },
              "protocol": "All",
              "allocatedOutboundPorts": 120,
              "idleTimeoutInMinutes": 4,
              "enableTcpReset": false,
              "frontendIPConfigurations": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('pubSLB1name'), 'ipconfig1')]"
                }
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('SLB1pubIPname'))]"
      ]
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2022-11-01",
      "name": "[parameters('vm1NICname')]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "privateIPAddressVersion": "IPv4",
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('pubSLB1name'), 'backendpool1')]"
                }
              ],
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('vnet1Name'), parameters('vnet1subnets')[0].name)]"
              },
              "primary": true
            }
          }
        ],
        "enableAcceleratedNetworking": false,
        "enableIPForwarding": false,
        "nicType": "Standard"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/loadBalancers', parameters('pubSLB1name'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnet1Name'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2022-11-01",
      "name": "[parameters('vm1Name')]",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('linuxVMsize')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "canonical",
            "offer": "0001-com-ubuntu-server-jammy",
            "sku": "22_04-lts-gen2",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "caching": "ReadWrite",
            "managedDisk": {
              "storageAccountType": "StandardSSD_LRS"
            },
            "deleteOption": "Delete"
          }
        },
        "osProfile": {
          "computerName": "[parameters('vm1Name')]",
          "adminUsername": "[parameters('username')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": false,
            "ssh": "[if(not(equals(parameters('sshpubkeydata'), '')), variables('sshkeyconfig'), createObject())]",
            "provisionVMAgent": true,
            "patchSettings": {
              "patchMode": "ImageDefault",
              "assessmentMode": "ImageDefault"
            }
          },
          "customData": "[variables('vm1cloudInit')]",
          "allowExtensionOperations": true
        },
        "securityProfile": {
          "uefiSettings": {
            "secureBootEnabled": true,
            "vTpmEnabled": true
          },
          "securityType": "TrustedLaunch"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('vm1NICname'))]",
              "properties": {
                "primary": true
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', parameters('vm1NICname'))]"
      ]
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "apiVersion": "2022-11-01",
      "name": "[parameters('remotevm1PubIPname')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static",
        "publicIPAddressVersion": "IPv4",
        "idleTimeoutInMinutes": 4
      }
    },
    {
      "type": "Microsoft.Network/networkInterfaces",
      "apiVersion": "2022-11-01",
      "name": "[parameters('RemoteVM1NICname')]",
      "location": "[parameters('location')]",
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "privateIPAddressVersion": "IPv4",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('remotevm1PubIPname'))]"
              },
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', parameters('remotevnet1Name'), parameters('remotevnet1subnets')[0].name)]"
              },
              "primary": true
            }
          }
        ],
        "enableAcceleratedNetworking": false,
        "enableIPForwarding": false,
        "nicType": "Standard"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses', parameters('remotevm1PubIPname'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', parameters('remotevnet1Name'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachines",
      "apiVersion": "2022-11-01",
      "name": "[parameters('RemoteVM1Name')]",
      "location": "[parameters('location')]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('linuxVMsize')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "canonical",
            "offer": "0001-com-ubuntu-server-jammy",
            "sku": "22_04-lts-gen2",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "caching": "ReadWrite",
            "managedDisk": {
              "storageAccountType": "StandardSSD_LRS"
            },
            "deleteOption": "Delete"
          }
        },
        "osProfile": {
          "computerName": "[parameters('RemoteVM1Name')]",
          "adminUsername": "[parameters('username')]",
          "adminPassword": "[parameters('adminPassword')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": false,
            "ssh": "[if(not(equals(parameters('sshpubkeydata'), '')), variables('sshkeyconfig'), createObject())]",
            "provisionVMAgent": true,
            "patchSettings": {
              "patchMode": "ImageDefault",
              "assessmentMode": "ImageDefault"
            }
          },
          "customData": "[variables('vm2cloudInit')]",
          "allowExtensionOperations": true
        },
        "securityProfile": {
          "uefiSettings": {
            "secureBootEnabled": true,
            "vTpmEnabled": true
          },
          "securityType": "TrustedLaunch"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', parameters('RemoteVM1NICname'))]",
              "properties": {
                "primary": true
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces', parameters('RemoteVM1NICname'))]"
      ]
    }
  ],
  "outputs": {
    "SLB1pubIPaddress": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('SLB1pubIPname')), '2022-11-01').ipAddress]"
    },
    "remoteVM1pubIPaddress": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('remotevm1PubIPname')), '2022-11-01').ipAddress]"
    }
  }
}